package jp.coolfactory.data.server;

import jp.coolfactory.anti_fraud.module.Status;
import jp.coolfactory.anti_fraud.module.FraudDetectionFactory;
import jp.coolfactory.data.util.URLUtil;
import org.apache.log4j.Logger;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.concurrent.Executors;

/**
 * It is used to process the POSTBACK requests generated by TUNE's MAT system.
 * It has the anti_fraud detection system.
 *
 * In order to use the anti fraud service, please add the following url as prefix
 *   https://antifraud.coolfactory.jp/postback?camp_id={my_campaign}&site_id={site_id}&site_name={site_name}&country_code={country_code}&device_brand={device_brand}&device_carrier={device_carrier}&device_model={device_model}&language={language}&device_ip={device_ip}&status={conversion_status}&click_date={click_datetime}&install_date={conversion_datetime}&ios_ifa={ios_ifa}&ios_ifv={ios_ifv}&os_version={os_version}&publisher_id={publisher_id}&tracking_id={tracking_id}&publisher_name={publisher_name}&jailbroke={os_jailbroke}&postback=
 *
 *
 * Created by wangqi on 23/11/2016.
 */
@WebServlet(name = "AfPostbackServlet", urlPatterns = {"/postback"})
public class AfPostbackServlet extends HttpServlet {

    private final static Logger LOGGER = Logger.getLogger(AfPostbackServlet.class.getName());

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doRequest(request, response);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doRequest(request, response);
    }

    protected void doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("utf-8");
        HashMap<String, String> params = new HashMap<String, String>();
        String af_campaign_id = request.getParameter("camp_id");
        String site_id = request.getParameter("site_id");
        String site_name = request.getParameter("site_name");
        String country_code = request.getParameter("country_code");
        String device_brand = request.getParameter("device_brand");
        String device_carrier = request.getParameter("device_carrier");
        String device_model = request.getParameter("device_model");
        String language = request.getParameter("language");
        String device_ip = request.getParameter("device_ip");
        String status = request.getParameter("status");
        String ios_ifa = request.getParameter("ios_ifa");
        String ios_ifv = request.getParameter("ios_ifv");
        String google_aid = request.getParameter("google_aid");
        String os_version = request.getParameter("os_version");
        String publisher_id = request.getParameter("publisher_id");
        String publisher_name = request.getParameter("publisher_name");
        String tracking_id = request.getParameter("tracking_id");
        String postback = request.getParameter("postback");
        String region = request.getParameter("region");
        String click_date = request.getParameter("click_date");
        String install_date = request.getParameter("install_date");
        String jailbroke = request.getParameter("jailbroke");
        String e_id = request.getParameter("e_id");

        params.put("af_campaign_id", af_campaign_id);
        params.put("site_id", site_id);
        params.put("site_name", site_name);
        params.put("country_code", country_code);
        params.put("region", region);
        params.put("device_brand", device_brand);
        params.put("device_carrier", device_carrier);
        params.put("device_model", device_model);
        params.put("language", language);
        params.put("device_ip", device_ip);
        params.put("status", status);
        params.put("ios_ifa", ios_ifa);
        params.put("ios_ifv", ios_ifv);
        params.put("google_aid", google_aid);
        params.put("os_version", os_version);
        params.put("publisher_id", publisher_id);
        params.put("publisher_name", publisher_name);
        params.put("tracking_id", tracking_id);
        params.put("click_date", click_date);
        params.put("install_date", install_date);
        params.put("jailbroke", jailbroke);
        params.put("e_id", e_id);

        if ( LOGGER.isDebugEnabled() ) {
            StringBuilder buf = new StringBuilder(200);
            buf.append(tracking_id).append(",");
            buf.append(af_campaign_id).append(",");
            buf.append(site_name).append(",");
            buf.append(country_code).append(",");
            buf.append(region).append(",");
            buf.append(device_brand).append(",");
            buf.append(device_carrier).append(",");
            buf.append(device_model).append(",");
            buf.append(device_ip).append(",");
            buf.append(status).append(",");
            buf.append(ios_ifa).append(",");
            buf.append(google_aid).append(",");
            buf.append(publisher_name).append(",");
            buf.append(tracking_id).append(",");
            buf.append(install_date).append(",");
            buf.append(jailbroke).append(",");
            buf.append(e_id);
            LOGGER.debug(buf.toString());
        }

        sendPostback(postback, params);
    }

    /**
     * Send back the postback URL
     * @param postback
     * @param params
     */
    private void sendPostback(String postback, HashMap<String, String> params ) {
        Executors.newCachedThreadPool().submit(() -> {
            try {
                Status checkStatus = FraudDetectionFactory.getInstance().evaluateInstall(params);
                params.put("status_code", String.valueOf(checkStatus.getStatus()));
                params.put("status_desc", checkStatus.getDesc());
                if ( checkStatus == Status.OK ) {
                    //Resend the postback
                    if ( postback != null && postback != "" ) {
                        LOGGER.info("Resend to postback to " + postback);
                        String postbackEncoded = URLUtil.encodeURL(postback);
                        LOGGER.info("Encode postback to " + postbackEncoded);
                        URL url = new URL(postbackEncoded);
                        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                        conn.setRequestMethod("GET");
                        conn.setRequestProperty("User-Agent", "antifraud/1.0");
                        int responseCode = conn.getResponseCode();
                        StringBuffer response = new StringBuffer();
                        if ( responseCode > 200 ) {
                            LOGGER.warn("Failed to send postback. Response code: " + responseCode);
                        } else {
                            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                            String inputLine;
                            while ((inputLine = in.readLine()) != null) {
                                response.append(inputLine);
                            }
                            in.close();
                        }
                        params.put("postback_code", String.valueOf(responseCode));
                        params.put("postback_desc", response.toString());
                    } else {
                        LOGGER.warn("postback param does not exist");
                    }
                }
            } catch (MalformedURLException e) {
                LOGGER.warn("Malformed postback url: " + postback);
            } catch (IOException e) {
                LOGGER.warn("Failed to connect to postback url: " + postback, e);
            } finally {
                //@TODO
                //Save in the install log
//                AntiFraudController.instance.saveLog(params);
            }
        });
    }
}
